"use strict";(self.webpackChunkpumped_fn_docs=self.webpackChunkpumped_fn_docs||[]).push([[324],{2133:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"getting-started/quick-start","title":"Quick Start","description":"Let\'s build a simple counter application to demonstrate the core concepts of Pumped Fn.","source":"@site/docs/getting-started/quick-start.md","sourceDirName":"getting-started","slug":"/getting-started/quick-start","permalink":"/pumped-fn/docs/getting-started/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/pumped-fn/pumped-fn/tree/main/docs/docs/getting-started/quick-start.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/pumped-fn/docs/getting-started/installation"},"next":{"title":"Your First App","permalink":"/pumped-fn/docs/getting-started/first-app"}}');var r=t(6106),o=t(8018);const i={},c="Quick Start",d={},a=[{value:"Step 1: Create State",id:"step-1-create-state",level:2},{value:"Step 2: Create Derived State",id:"step-2-create-derived-state",level:2},{value:"Step 3: Create a React Component",id:"step-3-create-a-react-component",level:2},{value:"Step 4: Set Up the Scope Provider",id:"step-4-set-up-the-scope-provider",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"What Just Happened?",id:"what-just-happened",level:2},{value:"Key Concepts Introduced",id:"key-concepts-introduced",level:2},{value:"Optional: Adding Tests",id:"optional-adding-tests",level:2},{value:"Setup",id:"setup",level:3},{value:"Test Configuration",id:"test-configuration",level:3},{value:"Testing Our Counter",id:"testing-our-counter",level:3},{value:"Run Tests",id:"run-tests",level:3},{value:"Why Test?",id:"why-test",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,r.jsx)(n.p,{children:"Let's build a simple counter application to demonstrate the core concepts of Pumped Fn."}),"\n",(0,r.jsx)(n.h2,{id:"step-1-create-state",children:"Step 1: Create State"}),"\n",(0,r.jsxs)(n.p,{children:["First, let's create a simple counter state using ",(0,r.jsx)(n.code,{children:"provide()"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { provide } from '@pumped-fn/core-next';\n\nconst counter = provide(() => 0);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"provide()"})," function creates an ",(0,r.jsx)(n.strong,{children:"executor"})," that holds state. The function passed to ",(0,r.jsx)(n.code,{children:"provide()"})," is called a ",(0,r.jsx)(n.strong,{children:"factory function"})," - it returns the initial value."]}),"\n",(0,r.jsx)(n.h2,{id:"step-2-create-derived-state",children:"Step 2: Create Derived State"}),"\n",(0,r.jsx)(n.p,{children:"Now let's create some derived state that depends on our counter:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { provide, derive } from '@pumped-fn/core-next';\n\nconst counter = provide(() => 0);\n\n// Derived state that automatically updates when counter changes\nconst doubledCounter = derive([counter.reactive], ([count]) => count * 2);\nconst isEven = derive([counter.reactive], ([count]) => count % 2 === 0);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"derive()"})," function creates computed state that automatically updates when its dependencies change. Notice the ",(0,r.jsx)(n.code,{children:".reactive"})," - this tells Pumped Fn to re-run the derivation whenever the counter changes."]}),"\n",(0,r.jsx)(n.h2,{id:"step-3-create-a-react-component",children:"Step 3: Create a React Component"}),"\n",(0,r.jsx)(n.p,{children:"Now let's use our state in a React component:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { useResolves } from '@pumped-fn/react';\n\nfunction Counter() {\n  const [count, doubled, even] = useResolves(counter, doubledCounter, isEven);\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <p>Doubled: {doubled}</p>\n      <p>Is even: {even ? 'Yes' : 'No'}</p>\n      <button onClick={() => counter.update(c => c + 1)}>\n        Increment\n      </button>\n      <button onClick={() => counter.update(c => c - 1)}>\n        Decrement\n      </button>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"useResolves()"})," hook subscribes to multiple executors and returns their current values. The component will automatically re-render when any of the values change."]}),"\n",(0,r.jsx)(n.h2,{id:"step-4-set-up-the-scope-provider",children:"Step 4: Set Up the Scope Provider"}),"\n",(0,r.jsxs)(n.p,{children:["Finally, wrap your app with the ",(0,r.jsx)(n.code,{children:"ScopeProvider"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { ScopeProvider } from '@pumped-fn/react';\n\nfunction App() {\n  return (\n    <ScopeProvider>\n      <Counter />\n    </ScopeProvider>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ScopeProvider"})," creates a scope that manages the lifecycle of your executors."]}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's the complete working example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React from 'react';\nimport { provide, derive } from '@pumped-fn/core-next';\nimport { useResolves, ScopeProvider } from '@pumped-fn/react';\n\n// State definitions\nconst counter = provide(() => 0);\nconst doubledCounter = derive([counter.reactive], ([count]) => count * 2);\nconst isEven = derive([counter.reactive], ([count]) => count % 2 === 0);\n\nfunction Counter() {\n  const [count, doubled, even] = useResolves(counter, doubledCounter, isEven);\n  \n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h3>Counter Example</h3>\n      <p>Count: <strong>{count}</strong></p>\n      <p>Doubled: <strong>{doubled}</strong></p>\n      <p>Is even: <strong>{even ? 'Yes' : 'No'}</strong></p>\n      <div style={{ marginTop: '10px' }}>\n        <button \n          onClick={() => counter.update(c => c + 1)}\n          style={{ marginRight: '10px' }}\n        >\n          Increment\n        </button>\n        <button onClick={() => counter.update(c => c - 1)}>\n          Decrement\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <ScopeProvider>\n      <Counter />\n    </ScopeProvider>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"what-just-happened",children:"What Just Happened?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State Creation"}),": We created a counter executor with ",(0,r.jsx)(n.code,{children:"provide()"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Derived State"}),": We created computed values that automatically update with ",(0,r.jsx)(n.code,{children:"derive()"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"React Integration"}),": We used ",(0,r.jsx)(n.code,{children:"useResolves()"})," to subscribe to state in our component"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automatic Updates"}),": When we call ",(0,r.jsx)(n.code,{children:"counter.update()"}),", all dependent components and derivations update automatically"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-concepts-introduced",children:"Key Concepts Introduced"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Executors"}),": Units of state created with ",(0,r.jsx)(n.code,{children:"provide()"})," or ",(0,r.jsx)(n.code,{children:"derive()"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reactive Dependencies"}),": Using ",(0,r.jsx)(n.code,{children:".reactive"})," to create automatic updates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scopes"}),": Containers that manage executor lifecycles"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hooks"}),": React integration with ",(0,r.jsx)(n.code,{children:"useResolves()"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"optional-adding-tests",children:"Optional: Adding Tests"}),"\n",(0,r.jsx)(n.p,{children:"Testing your Pumped Fn state is straightforward and highly recommended. Here's a simple test for our counter example:"}),"\n",(0,r.jsx)(n.h3,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.p,{children:"First, install testing dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev vitest @testing-library/react @testing-library/jest-dom jsdom\n"})}),"\n",(0,r.jsx)(n.h3,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"vitest.config.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { defineConfig } from "vitest/config";\n\nexport default defineConfig({\n  test: {\n    environment: "jsdom",\n    globals: true,\n    setupFiles: ["./tests/setup.ts"],\n  },\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"tests/setup.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import "@testing-library/jest-dom";\n'})}),"\n",(0,r.jsx)(n.h3,{id:"testing-our-counter",children:"Testing Our Counter"}),"\n",(0,r.jsxs)(n.p,{children:["Pumped Fn makes testing easy with the ",(0,r.jsx)(n.code,{children:"preset"})," function. Instead of mocking, you simulate different states:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// counter.test.tsx\nimport { test, expect } from "vitest";\nimport { render, screen } from "@testing-library/react";\nimport { provide, derive, createScope, preset } from "@pumped-fn/core-next";\nimport { useResolves, ScopeProvider } from "@pumped-fn/react";\n\n// Our state (same as before)\nconst counter = provide(() => 0);\nconst doubledCounter = derive([counter.reactive], ([count]) => count * 2);\nconst isEven = derive([counter.reactive], ([count]) => count % 2 === 0);\n\n// Component to test\nfunction Counter() {\n  const [count, doubled, even] = useResolves(counter, doubledCounter, isEven);\n  \n  return (\n    <div>\n      <span data-testid="count">{count}</span>\n      <span data-testid="doubled">{doubled}</span>\n      <span data-testid="even">{even ? \'Even\' : \'Odd\'}</span>\n    </div>\n  );\n}\n\n// Test different counter states using preset\ntest("counter displays correctly for different values", () => {\n  // Test with count = 0 (even)\n  const evenScope = createScope(preset(counter, 0));\n  const { container: evenContainer } = render(\n    <ScopeProvider scope={evenScope}>\n      <Counter />\n    </ScopeProvider>\n  );\n  expect(screen.getByTestId("count")).toHaveTextContent("0");\n  expect(screen.getByTestId("doubled")).toHaveTextContent("0");\n  expect(screen.getByTestId("even")).toHaveTextContent("Even");\n  \n  // Test with count = 7 (odd)\n  const oddScope = createScope(preset(counter, 7));\n  const { container: oddContainer } = render(\n    <ScopeProvider scope={oddScope}>\n      <Counter />\n    </ScopeProvider>\n  );\n  expect(screen.getByTestId("count")).toHaveTextContent("7");\n  expect(screen.getByTestId("doubled")).toHaveTextContent("14");\n  expect(screen.getByTestId("even")).toHaveTextContent("Odd");\n});\n\n// Test derived state logic directly\ntest("counter derivations work correctly", async () => {\n  // Test with different preset values\n  const testCases = [\n    { input: 0, doubled: 0, even: true },\n    { input: 5, doubled: 10, even: false },\n    { input: 12, doubled: 24, even: true },\n  ];\n  \n  for (const { input, doubled, even } of testCases) {\n    const scope = createScope(preset(counter, input));\n    \n    expect(await scope.resolve(doubledCounter)).toBe(doubled);\n    expect(await scope.resolve(isEven)).toBe(even);\n  }\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"run-tests",children:"Run Tests"}),"\n",(0,r.jsxs)(n.p,{children:["Add to your ",(0,r.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "test": "vitest",\n    "test:ui": "vitest --ui"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Run tests:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm test\n"})}),"\n",(0,r.jsx)(n.h3,{id:"why-test",children:"Why Test?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Confidence"}),": Ensure your state logic works correctly"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Refactoring"}),": Safely change implementation while maintaining behavior"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Tests serve as living examples of how your state works"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Debugging"}),": Isolate issues in your state management logic"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For more comprehensive testing strategies, see our ",(0,r.jsx)(n.a,{href:"/pumped-fn/docs/testing/overview",children:"Testing Guide"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:["Now that you understand the basics (and optionally how to test them), let's build a more complex application in ",(0,r.jsx)(n.a,{href:"/pumped-fn/docs/getting-started/first-app",children:"Your First App"}),"!"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8018:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(7378);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);