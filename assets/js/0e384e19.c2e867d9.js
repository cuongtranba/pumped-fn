"use strict";(self.webpackChunkpumped_fn_docs=self.webpackChunkpumped_fn_docs||[]).push([[976],{8018:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(7378);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},9869:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"intro","title":"Introduction","description":"Pumped Fn is a functional reactive state management library designed specifically for React applications. It provides a clean, type-safe way to manage complex state with automatic reactivity and powerful composition patterns.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/pumped-fn/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/pumped-fn/pumped-fn/tree/main/docs/docs/intro.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"Installation","permalink":"/pumped-fn/docs/getting-started/installation"}}');var a=t(6106),o=t(8018);const r={},s="Introduction",c={},d=[{value:"What is Pumped Fn?",id:"what-is-pumped-fn",level:2},{value:"Key Features",id:"key-features",level:2},{value:"\ud83d\udd04 Reactive State Management",id:"-reactive-state-management",level:3},{value:"\ud83e\udde9 Functional Composition",id:"-functional-composition",level:3},{value:"\ud83d\udd12 Type Safety",id:"-type-safety",level:3},{value:"\u26a1 Performance Optimized",id:"-performance-optimized",level:3},{value:"\ud83c\udfaf React Integration",id:"-react-integration",level:3},{value:"Quick Example",id:"quick-example",level:2},{value:"Getting Started",id:"getting-started",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Pumped Fn"})," is a functional reactive state management library designed specifically for React applications. It provides a clean, type-safe way to manage complex state with automatic reactivity and powerful composition patterns."]}),"\n",(0,a.jsx)(n.h2,{id:"what-is-pumped-fn",children:"What is Pumped Fn?"}),"\n",(0,a.jsxs)(n.p,{children:["Pumped Fn is built around the concept of ",(0,a.jsx)(n.strong,{children:"Executors"})," - composable units of state and logic that can be combined to create complex reactive systems. Unlike traditional state management solutions, Pumped Fn emphasizes:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Functional Composition"}),": Build complex state from simple, reusable pieces"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Automatic Reactivity"}),": Components update automatically when dependencies change"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Type Safety"}),": Full TypeScript support with automatic type inference"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Lifecycle Management"}),": Automatic cleanup and resource management"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,a.jsx)(n.h3,{id:"-reactive-state-management",children:"\ud83d\udd04 Reactive State Management"}),"\n",(0,a.jsx)(n.p,{children:"State changes automatically propagate to dependent components and computations."}),"\n",(0,a.jsx)(n.h3,{id:"-functional-composition",children:"\ud83e\udde9 Functional Composition"}),"\n",(0,a.jsxs)(n.p,{children:["Compose complex state logic from simple, reusable executors using ",(0,a.jsx)(n.code,{children:"provide()"})," and ",(0,a.jsx)(n.code,{children:"derive()"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"-type-safety",children:"\ud83d\udd12 Type Safety"}),"\n",(0,a.jsx)(n.p,{children:"Full TypeScript support with automatic type inference throughout your state tree."}),"\n",(0,a.jsx)(n.h3,{id:"-performance-optimized",children:"\u26a1 Performance Optimized"}),"\n",(0,a.jsx)(n.p,{children:"Minimal re-renders with fine-grained reactivity and proxy-based change detection."}),"\n",(0,a.jsx)(n.h3,{id:"-react-integration",children:"\ud83c\udfaf React Integration"}),"\n",(0,a.jsx)(n.p,{children:"Purpose-built React hooks and components for seamless integration."}),"\n",(0,a.jsx)(n.h2,{id:"quick-example",children:"Quick Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { provide, derive } from '@pumped-fn/core-next';\nimport { useResolves, ScopeProvider } from '@pumped-fn/react';\n\n// Define state\nconst count = provide(() => 0);\nconst doubledCount = derive([count.reactive], ([count]) => count * 2);\n\n// Use in React\nfunction Counter() {\n  const [countValue, doubledValue] = useResolves(count, doubledCount);\n  \n  return (\n    <div>\n      <p>Count: {countValue}</p>\n      <p>Doubled: {doubledValue}</p>\n      <button onClick={() => count.update(c => c + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <ScopeProvider>\n      <Counter />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,a.jsxs)(n.p,{children:["Ready to dive in? Let's start with ",(0,a.jsx)(n.a,{href:"/pumped-fn/docs/getting-started/installation",children:"installation"})," and build your first Pumped Fn application!"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);