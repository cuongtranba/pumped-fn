"use strict";(self.webpackChunkpumped_fn_docs=self.webpackChunkpumped_fn_docs||[]).push([[471],{6234:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"getting-started/first-app","title":"Your First App","description":"Let\'s build a complete todo application to demonstrate more advanced Pumped Fn concepts. This will show you how to handle complex state interactions, form handling, and list management.","source":"@site/docs/getting-started/first-app.md","sourceDirName":"getting-started","slug":"/getting-started/first-app","permalink":"/pumped-fn/docs/getting-started/first-app","draft":false,"unlisted":false,"editUrl":"https://github.com/pumped-fn/pumped-fn/tree/main/docs/docs/getting-started/first-app.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Quick Start","permalink":"/pumped-fn/docs/getting-started/quick-start"},"next":{"title":"Executors","permalink":"/pumped-fn/docs/core-concepts/executors"}}');var d=t(6106),r=t(8018);const s={},i="Your First App",l={},c=[{value:"Application Structure",id:"application-structure",level:2},{value:"Step 1: Define Types",id:"step-1-define-types",level:2},{value:"Step 2: Create Base State",id:"step-2-create-base-state",level:2},{value:"Step 3: Create Derived State",id:"step-3-create-derived-state",level:2},{value:"Step 4: Create Action Creators",id:"step-4-create-action-creators",level:2},{value:"Step 5: Create React Components",id:"step-5-create-react-components",level:2},{value:"Step 6: Complete Application",id:"step-6-complete-application",level:2},{value:"Key Patterns Demonstrated",id:"key-patterns-demonstrated",level:2},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"your-first-app",children:"Your First App"})}),"\n",(0,d.jsx)(n.p,{children:"Let's build a complete todo application to demonstrate more advanced Pumped Fn concepts. This will show you how to handle complex state interactions, form handling, and list management."}),"\n",(0,d.jsx)(n.h2,{id:"application-structure",children:"Application Structure"}),"\n",(0,d.jsx)(n.p,{children:"Our todo app will have:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"A list of todos with add/remove functionality"}),"\n",(0,d.jsx)(n.li,{children:"Todo completion toggle"}),"\n",(0,d.jsx)(n.li,{children:"Selected todo detail view"}),"\n",(0,d.jsx)(n.li,{children:"Filtered views (completed todos)"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"step-1-define-types",children:"Step 1: Define Types"}),"\n",(0,d.jsx)(n.p,{children:"First, let's define our data types:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"export type Todo = {\n  id: string;\n  content: string;\n  completed: boolean;\n};\n"})}),"\n",(0,d.jsx)(n.h2,{id:"step-2-create-base-state",children:"Step 2: Create Base State"}),"\n",(0,d.jsx)(n.p,{children:"Let's create our core state executors:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"import { provide, derive } from '@pumped-fn/core-next';\n\n// ID generator for new todos\nconst idGenerator = provide(() => {\n  let id = 0;\n  return () => {\n    id++;\n    return id.toString();\n  };\n});\n\n// Main todos list\nconst todos = provide(() => [] as Todo[]);\n\n// Currently selected todo ID\nconst selectedTodoId = provide(() => null as string | null);\n"})}),"\n",(0,d.jsx)(n.h2,{id:"step-3-create-derived-state",children:"Step 3: Create Derived State"}),"\n",(0,d.jsx)(n.p,{children:"Now let's create computed state that depends on our base state:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"// Computed: completed todos\nconst completedTodos = derive([todos.reactive], ([todos]) => {\n  return todos.filter((todo) => todo.completed);\n});\n\n// Computed: currently selected todo\nconst selectedTodo = derive(\n  [selectedTodoId.reactive, todos.reactive],\n  ([selectedTodoId, todos]) => {\n    return selectedTodoId \n      ? todos.find((todo) => todo.id === selectedTodoId) ?? null\n      : null;\n  }\n);\n"})}),"\n",(0,d.jsx)(n.h2,{id:"step-4-create-action-creators",children:"Step 4: Create Action Creators"}),"\n",(0,d.jsx)(n.p,{children:"Let's create executors that return action functions:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:'// Action: set selected todo ID\nconst setSelectedTodoId = derive([selectedTodoId.static], ([ref]) => {\n  return (id: string | null) => {\n    ref.update(id);\n  };\n});\n\n// Action: todo operations\nconst todosController = derive(\n  [idGenerator, todos.static],\n  ([idGenerator, refTodos]) => {\n    return {\n      addTodo: (todo: Omit<Todo, "id">) => {\n        refTodos.update((todos) => {\n          const newTodo = { ...todo, id: idGenerator() };\n          return [...todos, newTodo];\n        });\n      },\n      removeTodo: (id: string) => {\n        refTodos.update((todos) => {\n          return todos.filter((todo) => todo.id !== id);\n        });\n      },\n      toggleComplete: (id: string) => {\n        refTodos.update((todos) => {\n          return todos.map((todo) => {\n            if (todo.id === id) {\n              return { ...todo, completed: !todo.completed };\n            }\n            return todo;\n          });\n        });\n      },\n    };\n  }\n);\n'})}),"\n",(0,d.jsx)(n.h2,{id:"step-5-create-react-components",children:"Step 5: Create React Components"}),"\n",(0,d.jsx)(n.p,{children:"Now let's build our React components:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { useResolves } from '@pumped-fn/react';\n\nfunction TodoList() {\n  const [todos, setSelectedTodoId, controller] = useResolves(\n    todos,\n    setSelectedTodoId,\n    todosController\n  );\n\n  return (\n    <div>\n      <h2>Todo List</h2>\n      {todos.map((todo) => (\n        <div key={todo.id} style={{ \n          padding: '10px', \n          border: '1px solid #ccc', \n          margin: '5px 0',\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        }}>\n          <span\n            onClick={() => setSelectedTodoId(todo.id)}\n            style={{ \n              textDecoration: todo.completed ? 'line-through' : 'none',\n              cursor: 'pointer',\n              flex: 1\n            }}\n          >\n            {todo.content}\n          </span>\n          <button onClick={() => controller.removeTodo(todo.id)}>\n            Remove\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction TodoForm() {\n  const [controller] = useResolves(todosController);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const content = formData.get('content') as string;\n    const completed = formData.get('completed') === 'on';\n\n    if (content.trim()) {\n      controller.addTodo({ content: content.trim(), completed });\n      e.currentTarget.reset();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} style={{ marginBottom: '20px' }}>\n      <div style={{ marginBottom: '10px' }}>\n        <input\n          type=\"text\"\n          name=\"content\"\n          placeholder=\"What needs to be done?\"\n          style={{ padding: '8px', marginRight: '10px' }}\n        />\n        <label>\n          <input type=\"checkbox\" name=\"completed\" />\n          {' '}Already completed\n        </label>\n      </div>\n      <button type=\"submit\">Add Todo</button>\n    </form>\n  );\n}\n\nfunction TodoDetail() {\n  const [selectedTodo, setSelectedTodoId, controller] = useResolves(\n    selectedTodo,\n    setSelectedTodoId,\n    todosController\n  );\n\n  if (!selectedTodo) return null;\n\n  return (\n    <div style={{ \n      padding: '20px', \n      border: '2px solid #007bff', \n      borderRadius: '8px',\n      marginTop: '20px'\n    }}>\n      <h3>{selectedTodo.content}</h3>\n      <label style={{ display: 'block', marginBottom: '10px' }}>\n        <input\n          type=\"checkbox\"\n          checked={selectedTodo.completed}\n          onChange={() => controller.toggleComplete(selectedTodo.id)}\n        />\n        {' '}Mark as completed\n      </label>\n      <button onClick={() => setSelectedTodoId(null)}>\n        Close\n      </button>\n    </div>\n  );\n}\n\nfunction CompletedTodos() {\n  const [completed] = useResolves(completedTodos);\n\n  return (\n    <div style={{ marginTop: '20px' }}>\n      <h3>Completed Todos ({completed.length})</h3>\n      {completed.map((todo) => (\n        <div key={todo.id} style={{ padding: '5px 0' }}>\n          \u2713 {todo.content}\n        </div>\n      ))}\n    </div>\n  );\n}\n"})}),"\n",(0,d.jsx)(n.h2,{id:"step-6-complete-application",children:"Step 6: Complete Application"}),"\n",(0,d.jsx)(n.p,{children:"Let's put it all together:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React from 'react';\nimport { provide, derive } from '@pumped-fn/core-next';\nimport { useResolves, ScopeProvider } from '@pumped-fn/react';\n\n// Types\nconst Todo = {};\n\n// State\nconst idGenerator = provide(() => {\n  let id = 0;\n  return () => {\n    id++;\n    return id.toString();\n  };\n});\n\nconst todos = provide(() => []);\nconst selectedTodoId = provide(() => null);\n\n// Derived State\nconst completedTodos = derive([todos.reactive], ([todos]) => {\n  return todos.filter((todo) => todo.completed);\n});\n\nconst selectedTodo = derive(\n  [selectedTodoId.reactive, todos.reactive],\n  ([selectedTodoId, todos]) => {\n    return selectedTodoId \n      ? todos.find((todo) => todo.id === selectedTodoId) ?? null\n      : null;\n  }\n);\n\n// Actions\nconst setSelectedTodoId = derive([selectedTodoId.static], ([ref]) => {\n  return (id) => ref.update(id);\n});\n\nconst todosController = derive(\n  [idGenerator, todos.static],\n  ([idGenerator, refTodos]) => {\n    return {\n      addTodo: (todo) => {\n        refTodos.update((todos) => {\n          const newTodo = { ...todo, id: idGenerator() };\n          return [...todos, newTodo];\n        });\n      },\n      removeTodo: (id) => {\n        refTodos.update((todos) => todos.filter((todo) => todo.id !== id));\n      },\n      toggleComplete: (id) => {\n        refTodos.update((todos) => \n          todos.map((todo) => \n            todo.id === id ? { ...todo, completed: !todo.completed } : todo\n          )\n        );\n      },\n    };\n  }\n);\n\n// Components\nfunction TodoApp() {\n  const [todosList, setSelected, controller, completed, selected] = useResolves(\n    todos, setSelectedTodoId, todosController, completedTodos, selectedTodo\n  );\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const content = formData.get('content');\n    const isCompleted = formData.get('completed') === 'on';\n\n    if (content?.trim()) {\n      controller.addTodo({ content: content.trim(), completed: isCompleted });\n      e.currentTarget.reset();\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '600px', margin: '0 auto' }}>\n      <h1>Todo App</h1>\n      \n      <form onSubmit={handleSubmit} style={{ marginBottom: '20px' }}>\n        <div style={{ marginBottom: '10px' }}>\n          <input\n            type=\"text\"\n            name=\"content\"\n            placeholder=\"What needs to be done?\"\n            style={{ padding: '8px', marginRight: '10px', width: '300px' }}\n          />\n          <label>\n            <input type=\"checkbox\" name=\"completed\" />\n            {' '}Already completed\n          </label>\n        </div>\n        <button type=\"submit\">Add Todo</button>\n      </form>\n\n      <div>\n        <h2>Todos ({todosList.length})</h2>\n        {todosList.map((todo) => (\n          <div key={todo.id} style={{ \n            padding: '10px', \n            border: '1px solid #ccc', \n            margin: '5px 0',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          }}>\n            <span\n              onClick={() => setSelected(todo.id)}\n              style={{ \n                textDecoration: todo.completed ? 'line-through' : 'none',\n                cursor: 'pointer',\n                flex: 1\n              }}\n            >\n              {todo.content}\n            </span>\n            <button onClick={() => controller.removeTodo(todo.id)}>\n              Remove\n            </button>\n          </div>\n        ))}\n      </div>\n\n      {selected && (\n        <div style={{ \n          padding: '20px', \n          border: '2px solid #007bff', \n          borderRadius: '8px',\n          marginTop: '20px'\n        }}>\n          <h3>{selected.content}</h3>\n          <label style={{ display: 'block', marginBottom: '10px' }}>\n            <input\n              type=\"checkbox\"\n              checked={selected.completed}\n              onChange={() => controller.toggleComplete(selected.id)}\n            />\n            {' '}Mark as completed\n          </label>\n          <button onClick={() => setSelected(null)}>\n            Close\n          </button>\n        </div>\n      )}\n\n      <div style={{ marginTop: '20px' }}>\n        <h3>Completed Todos ({completed.length})</h3>\n        {completed.map((todo) => (\n          <div key={todo.id} style={{ padding: '5px 0' }}>\n            \u2713 {todo.content}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <ScopeProvider>\n      <TodoApp />\n    </ScopeProvider>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,d.jsx)(n.h2,{id:"key-patterns-demonstrated",children:"Key Patterns Demonstrated"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Complex State Management"}),": Multiple interdependent state pieces"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Derived State"}),": Computed values that update automatically"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Action Creators"}),": Functions that encapsulate state updates"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Form Handling"}),": Integration with React forms"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Conditional Rendering"}),": Components that show/hide based on state"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"List Management"}),": Adding, removing, and updating list items"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,d.jsx)(n.p,{children:"Now that you've built a complete application, dive deeper into:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"/pumped-fn/docs/core-concepts/executors",children:"Core Concepts"})," - Understanding executors in detail"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"/pumped-fn/docs/react/overview",children:"React Integration"})," - Advanced React patterns"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"/pumped-fn/docs/examples/counter",children:"Examples"})," - More complex examples"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},8018:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(7378);const d={},r=o.createContext(d);function s(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);