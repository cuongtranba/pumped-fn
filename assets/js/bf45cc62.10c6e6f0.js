"use strict";(self.webpackChunkpumped_fn_docs=self.webpackChunkpumped_fn_docs||[]).push([[404],{7576:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"testing/interactive-testing","title":"Interactive Testing Examples","description":"This page provides live, interactive examples of how to test Pumped Fn applications using the preset approach. You can run these examples right in your browser to see how preset-based testing works.","source":"@site/docs/testing/interactive-testing.md","sourceDirName":"testing","slug":"/testing/interactive-testing","permalink":"/pumped-fn/docs/testing/interactive-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/pumped-fn/pumped-fn/tree/main/docs/docs/testing/interactive-testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Testing Utilities","permalink":"/pumped-fn/docs/testing/testing-utilities"},"next":{"title":"Counter Example","permalink":"/pumped-fn/docs/examples/counter"}}');var r=t(6106),o=t(8018);const i={},a="Interactive Testing Examples",c={},l=[{value:"Preset-Based Testing Demo",id:"preset-based-testing-demo",level:2},{value:"React Component Testing Simulation",id:"react-component-testing-simulation",level:2},{value:"Async Testing Example",id:"async-testing-example",level:2},{value:"Key Testing Principles with Preset",id:"key-testing-principles-with-preset",level:2},{value:"1. <strong>Use Preset Instead of Mocking</strong>",id:"1-use-preset-instead-of-mocking",level:3},{value:"2. <strong>Test Business Logic, Not Implementation</strong>",id:"2-test-business-logic-not-implementation",level:3},{value:"3. <strong>Create Realistic Test Scenarios</strong>",id:"3-create-realistic-test-scenarios",level:3},{value:"4. <strong>Keep Tests Simple and Readable</strong>",id:"4-keep-tests-simple-and-readable",level:3},{value:"5. <strong>Test State Interactions</strong>",id:"5-test-state-interactions",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"interactive-testing-examples",children:"Interactive Testing Examples"})}),"\n",(0,r.jsxs)(n.p,{children:["This page provides live, interactive examples of how to test Pumped Fn applications using the ",(0,r.jsx)(n.code,{children:"preset"})," approach. You can run these examples right in your browser to see how preset-based testing works."]}),"\n",(0,r.jsx)(n.h2,{id:"preset-based-testing-demo",children:"Preset-Based Testing Demo"}),"\n",(0,r.jsxs)(n.p,{children:["Here's a live example showing how to use ",(0,r.jsx)(n.code,{children:"preset"})," to test different application states:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React, { useState } from 'react';\nimport { provide, derive, createScope, preset } from '@pumped-fn/core-next';\nimport { ScopeProvider } from '@pumped-fn/react';\n\nfunction PresetTestingDemo() {\n  const [testResults, setTestResults] = useState([]);\n  \n  const runTests = async () => {\n    const results = [];\n    \n    // Application state\n    const userRole = provide(() => \"guest\");\n    const isLoggedIn = provide(() => false);\n    const cart = provide(() => []);\n    \n    // Derived state\n    const canCheckout = derive(\n      [isLoggedIn.reactive, cart.reactive], \n      ([loggedIn, cartItems]) => loggedIn && cartItems.length > 0\n    );\n    \n    const availableFeatures = derive(\n      [userRole.reactive, isLoggedIn.reactive],\n      ([role, loggedIn]) => {\n        const features = [\"browse\"];\n        if (loggedIn) features.push(\"profile\");\n        if (role === \"admin\") features.push(\"admin-panel\");\n        return features;\n      }\n    );\n    \n    try {\n      // Test 1: Guest user (default state)\n      const guestScope = createScope(); // Uses default values\n      const guestCanCheckout = await guestScope.resolve(canCheckout);\n      const guestFeatures = await guestScope.resolve(availableFeatures);\n      \n      results.push({\n        test: \"Guest user defaults\",\n        passed: !guestCanCheckout && guestFeatures.length === 1,\n        details: `canCheckout: ${guestCanCheckout}, features: [${guestFeatures.join(', ')}]`\n      });\n      \n      // Test 2: Logged in user with items in cart\n      const loggedInUserScope = createScope(\n        preset(isLoggedIn, true),\n        preset(userRole, \"user\"),\n        preset(cart, [{ id: 1, name: \"Product\" }])\n      );\n      \n      const userCanCheckout = await loggedInUserScope.resolve(canCheckout);\n      const userFeatures = await loggedInUserScope.resolve(availableFeatures);\n      \n      results.push({\n        test: \"Logged in user with cart\",\n        passed: userCanCheckout && userFeatures.includes(\"profile\"),\n        details: `canCheckout: ${userCanCheckout}, features: [${userFeatures.join(', ')}]`\n      });\n      \n      // Test 3: Admin user\n      const adminScope = createScope(\n        preset(isLoggedIn, true),\n        preset(userRole, \"admin\"),\n        preset(cart, [])\n      );\n      \n      const adminCanCheckout = await adminScope.resolve(canCheckout);\n      const adminFeatures = await adminScope.resolve(availableFeatures);\n      \n      results.push({\n        test: \"Admin user with empty cart\",\n        passed: !adminCanCheckout && adminFeatures.includes(\"admin-panel\"),\n        details: `canCheckout: ${adminCanCheckout}, features: [${adminFeatures.join(', ')}]`\n      });\n      \n    } catch (error) {\n      results.push({\n        test: \"Error occurred\",\n        passed: false,\n        details: error.message\n      });\n    }\n    \n    setTestResults(results);\n  };\n  \n  return (\n    <div style={{ padding: '20px', fontFamily: 'monospace' }}>\n      <h3>Preset Testing Demo</h3>\n      <p style={{ marginBottom: '20px', color: '#666' }}>\n        This demo shows how to test different application states using <code>preset</code>\n      </p>\n      <button \n        onClick={runTests}\n        style={{ \n          padding: '10px 20px', \n          backgroundColor: '#007bff', \n          color: 'white', \n          border: 'none', \n          borderRadius: '4px',\n          marginBottom: '20px'\n        }}\n      >\n        Run Preset Tests\n      </button>\n      \n      {testResults.length > 0 && (\n        <div>\n          <h4>Test Results:</h4>\n          {testResults.map((result, index) => (\n            <div \n              key={index}\n              style={{\n                padding: '10px',\n                margin: '5px 0',\n                backgroundColor: result.passed ? '#d4edda' : '#f8d7da',\n                color: result.passed ? '#155724' : '#721c24',\n                border: `1px solid ${result.passed ? '#c3e6cb' : '#f5c6cb'}`,\n                borderRadius: '4px'\n              }}\n            >\n              <strong>{result.passed ? '\u2713 PASS' : '\u2717 FAIL'}</strong> {result.test}\n              <br />\n              <small>{result.details}</small>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ScopeProvider>\n      <TestingDemo />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"react-component-testing-simulation",children:"React Component Testing Simulation"}),"\n",(0,r.jsx)(n.p,{children:"Here's an interactive example showing how React component testing would work:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React, { useState } from 'react';\nimport { provide, derive } from '@pumped-fn/core-next';\nimport { useResolves, ScopeProvider } from '@pumped-fn/react';\n\n// Test state\nconst counter = provide(() => 0);\nconst doubled = derive([counter.reactive], ([count]) => count * 2);\n\n// Component to test\nfunction CounterComponent() {\n  const [count, doubledValue] = useResolves(counter, doubled);\n  \n  return (\n    <div style={{ \n      padding: '15px', \n      border: '1px solid #ccc', \n      borderRadius: '8px',\n      margin: '10px 0'\n    }}>\n      <h4>Counter Component</h4>\n      <div data-testid=\"count\">Count: {count}</div>\n      <div data-testid=\"doubled\">Doubled: {doubledValue}</div>\n      <button \n        data-testid=\"increment\"\n        onClick={() => counter.update(c => c + 1)}\n        style={{ marginTop: '10px', marginRight: '10px' }}\n      >\n        Increment\n      </button>\n      <button \n        data-testid=\"reset\"\n        onClick={() => counter.update(0)}\n        style={{ marginTop: '10px' }}\n      >\n        Reset\n      </button>\n    </div>\n  );\n}\n\n// Test simulation component\nfunction TestSimulator() {\n  const [testLog, setTestLog] = useState([]);\n  const [currentValues, setCurrentValues] = useResolves(counter, doubled);\n  \n  const logTest = (description, condition, expected, actual) => {\n    const passed = condition;\n    setTestLog(prev => [...prev, {\n      description,\n      passed,\n      expected,\n      actual,\n      timestamp: Date.now()\n    }]);\n  };\n  \n  const runComponentTest = () => {\n    setTestLog([]);\n    \n    // Simulate test steps\n    setTimeout(() => {\n      logTest(\n        \"Initial render check\",\n        currentValues[0] === 0 && currentValues[1] === 0,\n        \"count: 0, doubled: 0\",\n        `count: ${currentValues[0]}, doubled: ${currentValues[1]}`\n      );\n    }, 100);\n  };\n  \n  const simulateClick = () => {\n    counter.update(c => c + 1);\n    \n    setTimeout(() => {\n      logTest(\n        \"After increment click\",\n        currentValues[0] > 0 && currentValues[1] === currentValues[0] * 2,\n        \"count > 0, doubled = count * 2\",\n        `count: ${currentValues[0]}, doubled: ${currentValues[1]}`\n      );\n    }, 100);\n  };\n  \n  return (\n    <div style={{ padding: '20px' }}>\n      <h3>React Component Testing Simulation</h3>\n      \n      <CounterComponent />\n      \n      <div style={{ marginTop: '20px' }}>\n        <button \n          onClick={runComponentTest}\n          style={{ \n            padding: '8px 16px', \n            backgroundColor: '#28a745', \n            color: 'white', \n            border: 'none', \n            borderRadius: '4px',\n            marginRight: '10px'\n          }}\n        >\n          Run Initial Test\n        </button>\n        \n        <button \n          onClick={simulateClick}\n          style={{ \n            padding: '8px 16px', \n            backgroundColor: '#007bff', \n            color: 'white', \n            border: 'none', \n            borderRadius: '4px'\n          }}\n        >\n          Simulate Click & Test\n        </button>\n      </div>\n      \n      {testLog.length > 0 && (\n        <div style={{ marginTop: '20px' }}>\n          <h4>Test Log:</h4>\n          {testLog.map((log, index) => (\n            <div \n              key={index}\n              style={{\n                padding: '8px',\n                margin: '5px 0',\n                backgroundColor: log.passed ? '#d4edda' : '#f8d7da',\n                color: log.passed ? '#155724' : '#721c24',\n                border: `1px solid ${log.passed ? '#c3e6cb' : '#f5c6cb'}`,\n                borderRadius: '4px',\n                fontSize: '14px'\n              }}\n            >\n              <strong>{log.passed ? '\u2713 PASS' : '\u2717 FAIL'}</strong> {log.description}\n              <br />\n              <small>Expected: {log.expected} | Got: {log.actual}</small>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ScopeProvider>\n      <TestSimulator />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"async-testing-example",children:"Async Testing Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's how to test async executors and error handling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React, { useState } from 'react';\nimport { provide, derive, createScope } from '@pumped-fn/core-next';\nimport { ScopeProvider } from '@pumped-fn/react';\n\nfunction AsyncTestingDemo() {\n  const [testResults, setTestResults] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  \n  const runAsyncTests = async () => {\n    setIsRunning(true);\n    setTestResults([]);\n    const results = [];\n    \n    try {\n      // Test 1: Successful async executor\n      const asyncData = provide(async () => {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        return { message: \"Data loaded successfully!\" };\n      });\n      \n      const scope = createScope();\n      const startTime = Date.now();\n      const result = await scope.resolve(asyncData);\n      const duration = Date.now() - startTime;\n      \n      results.push({\n        test: \"Async data loading\",\n        passed: result.message === \"Data loaded successfully!\" && duration >= 500,\n        details: `Resolved with: \"${result.message}\" in ${duration}ms`\n      });\n      \n      // Test 2: Error handling\n      const failingExecutor = provide(async () => {\n        await new Promise(resolve => setTimeout(resolve, 200));\n        throw new Error(\"Network timeout\");\n      });\n      \n      try {\n        await scope.resolve(failingExecutor);\n        results.push({\n          test: \"Error handling\",\n          passed: false,\n          details: \"Expected error but resolved successfully\"\n        });\n      } catch (error) {\n        results.push({\n          test: \"Error handling\",\n          passed: error.message === \"Network timeout\",\n          details: `Caught error: \"${error.message}\"`\n        });\n      }\n      \n      // Test 3: Dependent async executors\n      const user = provide(async () => {\n        await new Promise(resolve => setTimeout(resolve, 300));\n        return { id: 1, name: \"John Doe\" };\n      });\n      \n      const userPosts = derive([user], async ([userData]) => {\n        await new Promise(resolve => setTimeout(resolve, 200));\n        return [`Post 1 by ${userData.name}`, `Post 2 by ${userData.name}`];\n      });\n      \n      const posts = await scope.resolve(userPosts);\n      results.push({\n        test: \"Async dependency chain\",\n        passed: posts.length === 2 && posts[0].includes(\"John Doe\"),\n        details: `Posts: ${JSON.stringify(posts)}`\n      });\n      \n    } catch (error) {\n      results.push({\n        test: \"Unexpected error\",\n        passed: false,\n        details: error.message\n      });\n    }\n    \n    setTestResults(results);\n    setIsRunning(false);\n  };\n  \n  return (\n    <div style={{ padding: '20px' }}>\n      <h3>Async Testing Demo</h3>\n      <button \n        onClick={runAsyncTests}\n        disabled={isRunning}\n        style={{ \n          padding: '10px 20px', \n          backgroundColor: isRunning ? '#6c757d' : '#007bff', \n          color: 'white', \n          border: 'none', \n          borderRadius: '4px',\n          marginBottom: '20px'\n        }}\n      >\n        {isRunning ? 'Running Tests...' : 'Run Async Tests'}\n      </button>\n      \n      {isRunning && (\n        <div style={{ \n          padding: '10px', \n          backgroundColor: '#fff3cd', \n          border: '1px solid #ffeaa7',\n          borderRadius: '4px',\n          marginBottom: '20px'\n        }}>\n          \u23f3 Running async tests... This may take a few seconds.\n        </div>\n      )}\n      \n      {testResults.length > 0 && (\n        <div>\n          <h4>Async Test Results:</h4>\n          {testResults.map((result, index) => (\n            <div \n              key={index}\n              style={{\n                padding: '10px',\n                margin: '5px 0',\n                backgroundColor: result.passed ? '#d4edda' : '#f8d7da',\n                color: result.passed ? '#155724' : '#721c24',\n                border: `1px solid ${result.passed ? '#c3e6cb' : '#f5c6cb'}`,\n                borderRadius: '4px'\n              }}\n            >\n              <strong>{result.passed ? '\u2713 PASS' : '\u2717 FAIL'}</strong> {result.test}\n              <br />\n              <small>{result.details}</small>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ScopeProvider>\n      <AsyncTestingDemo />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-testing-principles-with-preset",children:"Key Testing Principles with Preset"}),"\n",(0,r.jsx)(n.p,{children:"Based on these interactive examples, here are the key testing principles for Pumped Fn:"}),"\n",(0,r.jsxs)(n.h3,{id:"1-use-preset-instead-of-mocking",children:["1. ",(0,r.jsx)(n.strong,{children:"Use Preset Instead of Mocking"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"preset"})," allows you to simulate any application state"]}),"\n",(0,r.jsx)(n.li,{children:"No need for complex mocking of APIs or external dependencies"}),"\n",(0,r.jsx)(n.li,{children:"Test how your derived state responds to different input conditions"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-test-business-logic-not-implementation",children:["2. ",(0,r.jsx)(n.strong,{children:"Test Business Logic, Not Implementation"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Focus on testing the behavior of your derived state"}),"\n",(0,r.jsx)(n.li,{children:"Verify that your business rules work correctly under different conditions"}),"\n",(0,r.jsx)(n.li,{children:"Test edge cases by presetting boundary values"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-create-realistic-test-scenarios",children:["3. ",(0,r.jsx)(n.strong,{children:"Create Realistic Test Scenarios"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use preset to simulate real-world application states"}),"\n",(0,r.jsx)(n.li,{children:"Test different user types, permissions, and data conditions"}),"\n",(0,r.jsx)(n.li,{children:"Verify component behavior under various state combinations"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"4-keep-tests-simple-and-readable",children:["4. ",(0,r.jsx)(n.strong,{children:"Keep Tests Simple and Readable"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Preset values make test intent clear"}),"\n",(0,r.jsx)(n.li,{children:"Each test scenario is self-contained and easy to understand"}),"\n",(0,r.jsx)(n.li,{children:"No complex setup or teardown required"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"5-test-state-interactions",children:["5. ",(0,r.jsx)(n.strong,{children:"Test State Interactions"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use multiple presets to test complex state relationships"}),"\n",(0,r.jsx)(n.li,{children:"Verify how different parts of your application state work together"}),"\n",(0,r.jsx)(n.li,{children:"Test conditional logic and feature flags easily"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"preset"})," approach makes testing Pumped Fn applications elegant, readable, and comprehensive without the complexity of traditional mocking frameworks."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8018:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(7378);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);