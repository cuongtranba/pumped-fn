"use strict";(self.webpackChunkpumped_fn_docs=self.webpackChunkpumped_fn_docs||[]).push([[944],{3054:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"examples/counter","title":"Counter Example","description":"This example demonstrates the core concepts of Pumped Fn with a reactive counter that includes configuration, timers, and derived state.","source":"@site/docs/examples/counter.md","sourceDirName":"examples","slug":"/examples/counter","permalink":"/pumped-fn/docs/examples/counter","draft":false,"unlisted":false,"editUrl":"https://github.com/pumped-fn/pumped-fn/tree/main/docs/docs/examples/counter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interactive Testing Examples","permalink":"/pumped-fn/docs/testing/interactive-testing"}}');var o=t(6106),i=t(8018);const c={},s="Counter Example",l={},a=[{value:"Basic Counter",id:"basic-counter",level:2},{value:"Configurable Auto-Counter",id:"configurable-auto-counter",level:2},{value:"Multi-Counter Example",id:"multi-counter-example",level:2},{value:"Key Concepts Demonstrated",id:"key-concepts-demonstrated",level:2},{value:"1. Basic State Management",id:"1-basic-state-management",level:3},{value:"2. Derived State",id:"2-derived-state",level:3},{value:"3. Side Effects",id:"3-side-effects",level:3},{value:"4. Configuration Patterns",id:"4-configuration-patterns",level:3},{value:"5. Composition",id:"5-composition",level:3},{value:"Best Practices Shown",id:"best-practices-shown",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"counter-example",children:"Counter Example"})}),"\n",(0,o.jsx)(n.p,{children:"This example demonstrates the core concepts of Pumped Fn with a reactive counter that includes configuration, timers, and derived state."}),"\n",(0,o.jsx)(n.h2,{id:"basic-counter",children:"Basic Counter"}),"\n",(0,o.jsx)(n.p,{children:"Let's start with a simple counter:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React from 'react';\nimport { provide, derive } from '@pumped-fn/core-next';\nimport { useResolves, ScopeProvider } from '@pumped-fn/react';\n\nconst counter = provide(() => 0);\nconst isEven = derive([counter.reactive], ([count]) => count % 2 === 0);\n\nfunction SimpleCounter() {\n  const [count, even] = useResolves(counter, isEven);\n  \n  return (\n    <div style={{ padding: '20px', textAlign: 'center' }}>\n      <h3>Simple Counter</h3>\n      <p style={{ fontSize: '2em' }}>{count}</p>\n      <p>This number is {even ? 'even' : 'odd'}</p>\n      <div>\n        <button onClick={() => counter.update(c => c - 1)}>-</button>\n        <button onClick={() => counter.update(c => c + 1)} style={{ marginLeft: '10px' }}>+</button>\n      </div>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ScopeProvider>\n      <SimpleCounter />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configurable-auto-counter",children:"Configurable Auto-Counter"}),"\n",(0,o.jsx)(n.p,{children:"Now let's create a more advanced counter that automatically increments with configurable settings:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React from 'react';\nimport { provide, derive } from '@pumped-fn/core-next';\nimport { useResolves, ScopeProvider } from '@pumped-fn/react';\n\n// Configuration state\nconst config = provide(() => ({\n  increment: 1,\n  interval: 1000,\n  autoIncrement: false\n}));\n\n// Counter state\nconst counter = provide(() => 0);\n\n// Derived states\nconst isEven = derive([counter.reactive], ([count]) => count % 2 === 0);\nconst doubled = derive([counter.reactive], ([count]) => count * 2);\n\n// Auto-increment timer\nconst timer = derive(\n  [config.reactive, counter.static],\n  ([config, counterRef], controller) => {\n    if (!config.autoIncrement) {\n      return null;\n    }\n    \n    const intervalId = setInterval(() => {\n      counterRef.update(c => c + config.increment);\n    }, config.interval);\n    \n    controller.cleanup(() => {\n      clearInterval(intervalId);\n    });\n    \n    return intervalId;\n  }\n);\n\n// Configuration controller\nconst configController = derive(\n  [config.static],\n  ([configRef]) => ({\n    setIncrement: (increment) => configRef.update(c => ({ ...c, increment })),\n    setInterval: (interval) => configRef.update(c => ({ ...c, interval })),\n    toggleAutoIncrement: () => configRef.update(c => ({ ...c, autoIncrement: !c.autoIncrement }))\n  })\n);\n\nfunction ConfigurableCounter() {\n  const [count, cfg, even, doubled, controller] = useResolves(\n    counter, config, isEven, doubled, configController\n  );\n  \n  return (\n    <div style={{ padding: '20px', maxWidth: '400px', margin: '0 auto' }}>\n      <h3>Configurable Counter</h3>\n      \n      <div style={{ textAlign: 'center', marginBottom: '20px' }}>\n        <p style={{ fontSize: '2em', margin: '10px 0' }}>{count}</p>\n        <p>Doubled: {doubled}</p>\n        <p>Status: {even ? 'Even' : 'Odd'}</p>\n      </div>\n      \n      <div style={{ marginBottom: '20px' }}>\n        <h4>Configuration</h4>\n        <div style={{ marginBottom: '10px' }}>\n          <label>\n            Increment: \n            <input\n              type=\"number\"\n              value={cfg.increment}\n              onChange={(e) => controller.setIncrement(parseInt(e.target.value))}\n              style={{ marginLeft: '10px', width: '60px' }}\n            />\n          </label>\n        </div>\n        \n        <div style={{ marginBottom: '10px' }}>\n          <label>\n            Interval (ms): \n            <input\n              type=\"number\"\n              value={cfg.interval}\n              onChange={(e) => controller.setInterval(parseInt(e.target.value))}\n              style={{ marginLeft: '10px', width: '80px' }}\n            />\n          </label>\n        </div>\n        \n        <div style={{ marginBottom: '10px' }}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={cfg.autoIncrement}\n              onChange={controller.toggleAutoIncrement}\n            />\n            {' '}Auto-increment\n          </label>\n        </div>\n      </div>\n      \n      <div style={{ textAlign: 'center' }}>\n        <button onClick={() => counter.update(c => c - cfg.increment)}>\n          -{cfg.increment}\n        </button>\n        <button \n          onClick={() => counter.update(c => c + cfg.increment)} \n          style={{ marginLeft: '10px' }}\n        >\n          +{cfg.increment}\n        </button>\n        <button \n          onClick={() => counter.update(0)} \n          style={{ marginLeft: '10px' }}\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ScopeProvider>\n      <ConfigurableCounter />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"multi-counter-example",children:"Multi-Counter Example"}),"\n",(0,o.jsx)(n.p,{children:"Let's create multiple independent counters:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React from 'react';\nimport { provide, derive } from '@pumped-fn/core-next';\nimport { useResolves, ScopeProvider } from '@pumped-fn/react';\n\n// Counter factory\nfunction createCounter(name, initialValue = 0) {\n  const count = provide(() => initialValue);\n  const doubled = derive([count.reactive], ([c]) => c * 2);\n  const controller = derive([count.static], ([ref]) => ({\n    increment: () => ref.update(c => c + 1),\n    decrement: () => ref.update(c => c - 1),\n    reset: () => ref.update(initialValue)\n  }));\n  \n  return { name, count, doubled, controller };\n}\n\n// Create multiple counters\nconst counter1 = createCounter('Counter A', 0);\nconst counter2 = createCounter('Counter B', 10);\nconst counter3 = createCounter('Counter C', -5);\n\n// Sum of all counters\nconst totalSum = derive(\n  [counter1.count.reactive, counter2.count.reactive, counter3.count.reactive],\n  ([a, b, c]) => a + b + c\n);\n\nfunction CounterItem({ counter }) {\n  const [count, doubled, ctrl] = useResolves(counter.count, counter.doubled, counter.controller);\n  \n  return (\n    <div style={{ \n      border: '1px solid #ccc', \n      padding: '15px', \n      margin: '10px 0', \n      borderRadius: '8px' \n    }}>\n      <h4>{counter.name}</h4>\n      <p>Count: {count}</p>\n      <p>Doubled: {doubled}</p>\n      <div>\n        <button onClick={ctrl.decrement}>-</button>\n        <button onClick={ctrl.increment} style={{ margin: '0 10px' }}>+</button>\n        <button onClick={ctrl.reset}>Reset</button>\n      </div>\n    </div>\n  );\n}\n\nfunction MultiCounter() {\n  const [total] = useResolves(totalSum);\n  \n  return (\n    <div style={{ padding: '20px', maxWidth: '600px', margin: '0 auto' }}>\n      <h3>Multiple Counters</h3>\n      <p style={{ fontSize: '1.2em', textAlign: 'center' }}>\n        Total Sum: <strong>{total}</strong>\n      </p>\n      \n      <CounterItem counter={counter1} />\n      <CounterItem counter={counter2} />\n      <CounterItem counter={counter3} />\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ScopeProvider>\n      <MultiCounter />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"key-concepts-demonstrated",children:"Key Concepts Demonstrated"}),"\n",(0,o.jsx)(n.h3,{id:"1-basic-state-management",children:"1. Basic State Management"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Creating state with ",(0,o.jsx)(n.code,{children:"provide()"})]}),"\n",(0,o.jsxs)(n.li,{children:["Updating state with ",(0,o.jsx)(n.code,{children:".update()"})]}),"\n",(0,o.jsxs)(n.li,{children:["Subscribing to state with ",(0,o.jsx)(n.code,{children:"useResolves()"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"2-derived-state",children:"2. Derived State"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Computing values with ",(0,o.jsx)(n.code,{children:"derive()"})]}),"\n",(0,o.jsxs)(n.li,{children:["Automatic updates with ",(0,o.jsx)(n.code,{children:".reactive"})]}),"\n",(0,o.jsx)(n.li,{children:"Chaining derivations"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-side-effects",children:"3. Side Effects"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Timer management with cleanup"}),"\n",(0,o.jsx)(n.li,{children:"Conditional side effects"}),"\n",(0,o.jsx)(n.li,{children:"Resource cleanup"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"4-configuration-patterns",children:"4. Configuration Patterns"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Nested state objects"}),"\n",(0,o.jsx)(n.li,{children:"Configuration controllers"}),"\n",(0,o.jsx)(n.li,{children:"Dynamic behavior based on config"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"5-composition",children:"5. Composition"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Reusable counter factory"}),"\n",(0,o.jsx)(n.li,{children:"Multiple independent instances"}),"\n",(0,o.jsx)(n.li,{children:"Cross-counter computations"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"best-practices-shown",children:"Best Practices Shown"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Separate concerns"}),": State, derivations, and controllers"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use factories"}),": For reusable state patterns"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Proper cleanup"}),": Always clean up side effects"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Type safety"}),": Leverage TypeScript inference"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Composition"}),": Build complex behavior from simple pieces"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This counter example demonstrates the power and flexibility of Pumped Fn's reactive state management system."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8018:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>s});var r=t(7378);const o={},i=r.createContext(o);function c(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);