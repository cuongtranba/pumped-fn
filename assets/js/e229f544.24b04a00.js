"use strict";(self.webpackChunkpumped_fn_docs=self.webpackChunkpumped_fn_docs||[]).push([[598],{6072:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"react/overview","title":"React Integration Overview","description":"Pumped Fn provides seamless React integration through the @pumped-fn/react package. This package includes hooks, components, and utilities that make working with Pumped Fn state in React applications intuitive and performant.","source":"@site/docs/react/overview.md","sourceDirName":"react","slug":"/react/overview","permalink":"/pumped-fn/docs/react/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/pumped-fn/pumped-fn/tree/main/docs/docs/react/overview.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Executors","permalink":"/pumped-fn/docs/core-concepts/executors"},"next":{"title":"Testing Overview","permalink":"/pumped-fn/docs/testing/overview"}}');var r=t(6106),s=t(8018);const i={},a="React Integration Overview",c={},d=[{value:"Core Components",id:"core-components",level:2},{value:"ScopeProvider",id:"scopeprovider",level:3},{value:"Custom Scope",id:"custom-scope",level:3},{value:"Core Hooks",id:"core-hooks",level:2},{value:"useResolves",id:"useresolves",level:3},{value:"useUpdate",id:"useupdate",level:3},{value:"useRelease",id:"userelease",level:3},{value:"Component Patterns",id:"component-patterns",level:2},{value:"Resolves Component",id:"resolves-component",level:3},{value:"Reactives Component",id:"reactives-component",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Selective Updates with useResolve",id:"selective-updates-with-useresolve",level:3},{value:"Conditional Rendering",id:"conditional-rendering",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Proxy-based Change Detection",id:"proxy-based-change-detection",level:3},{value:"Batched Updates",id:"batched-updates",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Suspense Integration",id:"suspense-integration",level:3},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"react-integration-overview",children:"React Integration Overview"})}),"\n",(0,r.jsxs)(n.p,{children:["Pumped Fn provides seamless React integration through the ",(0,r.jsx)(n.code,{children:"@pumped-fn/react"})," package. This package includes hooks, components, and utilities that make working with Pumped Fn state in React applications intuitive and performant."]}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)(n.h3,{id:"scopeprovider",children:"ScopeProvider"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ScopeProvider"})," is the root component that provides a scope context to your React tree:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { ScopeProvider } from '@pumped-fn/react';\n\nfunction App() {\n  return (\n    <ScopeProvider>\n      <YourApp />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-scope",children:"Custom Scope"}),"\n",(0,r.jsx)(n.p,{children:"You can provide your own scope or presets:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { createScope, preset } from '@pumped-fn/core-next';\nimport { ScopeProvider } from '@pumped-fn/react';\n\nconst customScope = createScope(\n  preset(userSettings, { theme: 'dark' })\n);\n\nfunction App() {\n  return (\n    <ScopeProvider scope={customScope}>\n      <YourApp />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"core-hooks",children:"Core Hooks"}),"\n",(0,r.jsx)(n.h3,{id:"useresolves",children:"useResolves"}),"\n",(0,r.jsx)(n.p,{children:"The primary hook for subscribing to executor state:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React from 'react';\nimport { provide, derive } from '@pumped-fn/core-next';\nimport { useResolves, ScopeProvider } from '@pumped-fn/react';\n\nconst count = provide(() => 0);\nconst doubled = derive([count.reactive], ([c]) => c * 2);\n\nfunction Counter() {\n  const [countValue, doubledValue] = useResolves(count, doubled);\n  \n  return (\n    <div style={{ padding: '20px' }}>\n      <p>Count: {countValue}</p>\n      <p>Doubled: {doubledValue}</p>\n      <button onClick={() => count.update(c => c + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ScopeProvider>\n      <Counter />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"useupdate",children:"useUpdate"}),"\n",(0,r.jsx)(n.p,{children:"Get an update function for a specific executor:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useUpdate } from '@pumped-fn/react';\n\nfunction Counter() {\n  const [count] = useResolves(counter);\n  const updateCount = useUpdate(counter);\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => updateCount(c => c + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"userelease",children:"useRelease"}),"\n",(0,r.jsx)(n.p,{children:"Get a release function for cleanup:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useRelease } from '@pumped-fn/react';\n\nfunction ExpensiveComponent() {\n  const [data] = useResolves(expensiveComputation);\n  const release = useRelease(expensiveComputation);\n  \n  return (\n    <div>\n      <p>Data: {data}</p>\n      <button onClick={release}>\n        Release Resources\n      </button>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"component-patterns",children:"Component Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"resolves-component",children:"Resolves Component"}),"\n",(0,r.jsx)(n.p,{children:"For render prop pattern:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Resolves } from '@pumped-fn/react';\n\nfunction App() {\n  return (\n    <Resolves e={[count, doubled]}>\n      {([countValue, doubledValue]) => (\n        <div>\n          <p>Count: {countValue}</p>\n          <p>Doubled: {doubledValue}</p>\n        </div>\n      )}\n    </Resolves>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reactives-component",children:"Reactives Component"}),"\n",(0,r.jsxs)(n.p,{children:["Automatically uses ",(0,r.jsx)(n.code,{children:".reactive"})," variant:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React from 'react';\nimport { provide, derive } from '@pumped-fn/core-next';\nimport { Reactives, ScopeProvider } from '@pumped-fn/react';\n\nconst items = provide(() => ['apple', 'banana', 'cherry']);\nconst count = derive([items.reactive], ([items]) => items.length);\n\nfunction ListExample() {\n  return (\n    <div style={{ padding: '20px' }}>\n      <Reactives e={[items, count]}>\n        {([itemList, itemCount]) => (\n          <div>\n            <h3>Items ({itemCount})</h3>\n            <ul>\n              {itemList.map((item, index) => (\n                <li key={index}>{item}</li>\n              ))}\n            </ul>\n            <button onClick={() => items.update(list => [...list, 'new item'])}>\n              Add Item\n            </button>\n          </div>\n        )}\n      </Reactives>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ScopeProvider>\n      <ListExample />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"selective-updates-with-useresolve",children:"Selective Updates with useResolve"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"useResolve"})," for fine-grained subscriptions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useResolve } from '@pumped-fn/react';\n\nconst user = provide(() => ({\n  name: 'John',\n  email: 'john@example.com',\n  settings: { theme: 'dark' }\n}));\n\nfunction UserName() {\n  // Only re-render when name changes\n  const name = useResolve(user, (user) => user.name);\n  \n  return <h1>{name}</h1>;\n}\n\nfunction UserEmail() {\n  // Only re-render when email changes\n  const email = useResolve(user, (user) => user.email);\n  \n  return <p>{email}</p>;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"conditional-rendering",children:"Conditional Rendering"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:"import React from 'react';\nimport { provide, derive } from '@pumped-fn/core-next';\nimport { useResolves, ScopeProvider } from '@pumped-fn/react';\n\nconst isLoggedIn = provide(() => false);\nconst user = provide(() => ({ name: 'John Doe', email: 'john@example.com' }));\n\nconst currentView = derive([isLoggedIn.reactive], ([loggedIn]) => {\n  return loggedIn ? 'dashboard' : 'login';\n});\n\nfunction ConditionalExample() {\n  const [loggedIn, view, userData] = useResolves(isLoggedIn, currentView, user);\n  \n  return (\n    <div style={{ padding: '20px' }}>\n      <h3>Current View: {view}</h3>\n      \n      {loggedIn ? (\n        <div>\n          <h4>Welcome, {userData.name}!</h4>\n          <p>Email: {userData.email}</p>\n          <button onClick={() => isLoggedIn.update(false)}>\n            Logout\n          </button>\n        </div>\n      ) : (\n        <div>\n          <h4>Please login</h4>\n          <button onClick={() => isLoggedIn.update(true)}>\n            Login\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ScopeProvider>\n      <ConditionalExample />\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"proxy-based-change-detection",children:"Proxy-based Change Detection"}),"\n",(0,r.jsx)(n.p,{children:"Pumped Fn uses proxy-based change detection to minimize re-renders:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const complexState = provide(() => ({\n  user: { name: 'John', settings: { theme: 'dark' } },\n  posts: [/* many posts */],\n  ui: { loading: false }\n}));\n\nfunction UserComponent() {\n  const [state] = useResolves(complexState);\n  \n  // Only re-renders when user.name changes\n  return <h1>{state.user.name}</h1>;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"batched-updates",children:"Batched Updates"}),"\n",(0,r.jsx)(n.p,{children:"Updates are automatically batched for performance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"function updateMultiple() {\n  // These updates are batched\n  count.update(c => c + 1);\n  name.update('New Name');\n  settings.update(s => ({ ...s, theme: 'light' }));\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"suspense-integration",children:"Suspense Integration"}),"\n",(0,r.jsx)(n.p,{children:"Pumped Fn integrates with React Suspense for async state:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Suspense } from 'react';\n\nconst asyncData = provide(async () => {\n  const response = await fetch('/api/data');\n  return response.json();\n});\n\nfunction AsyncComponent() {\n  const [data] = useResolves(asyncData);\n  return <div>{data.title}</div>;\n}\n\nfunction App() {\n  return (\n    <ScopeProvider>\n      <Suspense fallback={<div>Loading...</div>}>\n        <AsyncComponent />\n      </Suspense>\n    </ScopeProvider>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Explore ",(0,r.jsx)(n.a,{href:"/pumped-fn/docs/core-concepts/executors",children:"Core Concepts"})," for deeper understanding"]}),"\n",(0,r.jsxs)(n.li,{children:["Try the ",(0,r.jsx)(n.a,{href:"/pumped-fn/docs/examples/counter",children:"Counter Example"})," for hands-on practice"]}),"\n",(0,r.jsxs)(n.li,{children:["Build your ",(0,r.jsx)(n.a,{href:"/pumped-fn/docs/getting-started/first-app",children:"First App"})," step-by-step"]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8018:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(7378);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);